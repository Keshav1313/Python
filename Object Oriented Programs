from functools import wraps
import time
def calculate_time(function):
    @wraps(function)
    def wrapper(*args,**kwargs):
        t1=time.time()
        returned_value = function(*args,**kwargs)
        t2=time.time()
        total_time=t2-t1
        print(f'This function took {total_time} seconds')
        return returned_value
    return wrapper

@calculate_time
def square_finder(n):
    return  [i**2 for i in range(1,n+1)]

square_finder(1000)




from functools import wraps
def only_int_allow(function):
    @wraps(function)
    def wrapper(*args,**kwargs):
        if all([type(arg) == int for arg in args]):
            return  function(*args,**kwargs)
        print("Inavild arguments")
    return wrapper




            for arg in args:
            data_type.append(type(arg)==int)
        if all(data_type):
            return function(*args,**kwargs)
        else:
            print("Invalid arguments")
    return wrapper

@only_int_allow
def add_all(*args):
    total=0
    for i in args:
        total+=i
    return total

print(add_all(1,2,3,4,))


l=[1,2,3,4,5]
for num in map(lambda a:a**2,l):
    print(num)


Generators Best example
import time
t1=time.time()
# l=[i**2 for i in range(10000000)]
# print(time.time()-t1)

g=(i**2 for i in range(10000000))
print(time.time()-t1)


class Person:
    def __init__(self,fname,lname,age):
        #instance variable
        print("Init method // constructor get called")
        self.fname=fname
        self.lname=lname
        self.age=age


P1=Person('Keshav','Sinha',26)
P2=Person('chandan','Sinha',30)

print(P1.fname)
print(P2.fname)

class Laptop:
    def __init__(self,brand,name,price):
        #instance vafriable
        self.brand=brand
        self.name=name
        self.price=price
        self.addon=brand+" "+name

laptop1=Laptop('HP','Aspire',40000)
print(laptop1.addon)

class Person:
    def __init__(self,fname,lname,age):
        #instance variable
        print("Init method // constructor get called")
        self.fname=fname
        self.lname=lname
        self.age=age
#
    def full_name(self):
        return f"{self.fname}  {self.lname}"


    def is_above_18(self):
        return self.age>18

p1=Person("Keshav","Sinha",26)
print(p1.full_name())
print(p1.is_above_18())


class Laptop:
    def __init__(self,brand,name,price):
        #instance vafriable
        self.brand=brand
        self.name=name
        self.price=price
        self.addon=brand+" "+name


    def discount(self,num):
        off_price=(num/100)*self.price
        return self.price-off_price


laptop1=Laptop('HP','Aspire',40000)
print(laptop1.discount(50))


class Circle:
    pi = 3.14
    def __init__(self,radius):
        self.radius=radius


    def circumference(self):
        return 2*Circle.pi*self.radius

c = Circle(4)
print(c.circumference())



class Person:
    count_instance=0
    def __init__(self,fname,lname,age):
        #instance variable
        Person.count_instance+=1
        self.fname=fname
        self.lname=lname
        self.age=age

    @classmethod
    def from_string(cls,string):
        first,last,age=string.split(',')
        return cls(first,last,age)


    @classmethod
    def count_instances(cls):
        return f"You have created {cls.count_instance} of a Person Class"

    @staticmethod
    def hello():
        print("This is static method called")


    def full_name(self):
        return f"{self.fname}  {self.lname}"


    def is_above_18(self):
        return self.age>18

p1=Person("Keshav","Sinha",26)
p2=Person("chandan","Sinha",30)
p3=Person("rishav","Sinha",24)
p4=Person.from_string('chhenu,chodu,45')
print(p4.full_name())
# print(Person.count_instances())
Person.hello()
