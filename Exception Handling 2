In any programming language there are 2 types of errors are possible.
1. Syntax Errors
2. Runtime Errors

1. Syntax Errors:
The errors which occurs because of invalid syntax are called syntax errors.
Eg 1:
x=10
if x==10
print("keshav")
SyntaxError: invalid syntax
Eg 2:
print "keshav"
SyntaxError: Missing parentheses in call to 'print'
Note:
Programmer is responsible to correct these syntax errors. Once all syntax errors are
corrected then only program execution will be started.


2. Runtime Errors:
Also known as exceptions.
While executing the program if something goes wrong because of end user input or
programming logic or memory problems etc then we will get Runtime Errors.
Eg: print(10/0) ==>ZeroDivisionError: division by zero
print(10/"ten") ==>TypeError: unsupported operand type(s) for /: 'int' and 'str'
x=int(input("Enter Number:"))
print(x)
D:\Python_classes>py test.py

Enter Number:ten
ValueError: invalid literal for int() with base 10: 'ten'


Note: Exception Handling concept applicable for Runtime Errors but not for syntax errors


--------------------------------------------Exception Handling -----------------------------------------------------------

What is Exception:
An unwanted and unexpected event that disturbs normal flow of program is called exception.

Eg:
ZeroDivisionError
TypeError
ValueError
FileNotFoundError
EOFError
SleepingError
TyrePuncturedError


Eg:
For example our programming requirement is reading data from remote file locating at
London. At runtime if london file is not available then the program should not be
terminated abnormally. We have to provide local file to continue rest of the program
normally. This way of defining alternative is nothing but exception handling.

try:
    x=int(input('Enter the value of x :'))
    y=int(input('Enter the value of y :'))
    print(x/y)
except ZeroDivisionError:
    print('Cant Divivde with Zero')
except ValueError:
    print('please provide integer Value Only.')
    
    
OUTPUT:

Enter the value of x :10
Enter the value of y :5
2.0

Enter the value of x :10
Enter the value of y :0
Cant Divivde with Zero

Enter the value of x :10
Enter the value of y :ten
please provide integer Value Only.

Enter the value of x :10
Enter the value of y :-10
-1.0


try:
    x=int(input('Enter the value of x :'))
    y=int(input('Enter the value of y :'))
    print(x/y)
except ArithmeticError:
    print('ArithmaticError')
except ZeroDivisionError:
    print('ZeroDivisionError')
    
OUTPUT:
Enter the value of x :10
Enter the value of y :0
ArithmaticError



try with multiple except blocks:
The way of handling exception is varied from exception to exception.Hence for every
exception type a seperate except block we have to provide. i.e try with multiple except
blocks is possible and recommended to use


try:
    x=int(input('Enter the value of x :'))
    y=int(input('Enter the value of y :'))
    print(x/y)
except (ZeroDivisionError,ValueError,ArithmeticError) as msg:
    print('please provide valid Value Only and the problem is:',msg)
    
Enter the value of x :10
Enter the value of y :ten
please provide valid Value Only and the problem is: invalid literal for int() with base 10: 'ten'

try:
    x=int(input('Enter the value of x :'))
    y=int(input('Enter the value of y :'))
    print(x/y)
except ZeroDivisionError:
    print('ZeroDivisionError')
except:
    print('Please provide valid literals integer is required here.')
    
Enter the value of x :10
Enter the value of y :ten
Please provide valid literals integer is required here.



**************Note: If try with multiple except blocks available then default except block should be
last,otherwise we will get SyntaxError.


try:
    x=int(input('Enter the value of x :'))
    y=int(input('Enter the value of y :'))
    print(x/y)
except:
    print('Please provide valid literals integer is required here.')
except ZeroDivisionError:
    print('ZeroDivisionError')


File "<ipython-input-13-31544cd7d546>", line 7
    except ZeroDivisionError:
                       ^
SyntaxError: default 'except:' must be last

'''Finally Block'''
'''we required some place to maintain clean up code which should be executed
always irrespective of whether exception raised or not raised and whether exception
handled or not handled. Such type of best place is nothing but finally block.
Hence the main purpose of finally block is to maintain clean up code.'''

#Case-1: If there is no exception

try:
    print('Keshav')
except:
    print('except')
finally:
    print('YOu are a good Boy.')
    
OUTPUT:
Keshav
YOu are a good Boy.


#Case-2: If there is an exception raised but handled:

try:
    print('try')
    print(10/0)
except ZeroDivisionError:
    print('Zero Division Error')
finally:
    print('finally')
    
OUTPUT:
try
Zero Division Error
finally


#Case-3: If there is an exception raised but not handled:

try:
    print('try')
    print(10/0)
except ValueError:
    print('Value Error')
finally:
    print('finally')
    
outPUT:
try
finally
---------------------------------------------------------------------------
ZeroDivisionError                         Traceback (most recent call last)
<ipython-input-16-d8c32e388e3d> in <module>
      3 try:
      4     print('try')
----> 5     print(10/0)
      6 except ValueError:
      7     print('Value Error')

ZeroDivisionError: division by zero


#     *** Note: There is only one situation where finally block won't be executed ie whenever
#         we are using os._exit(0) function.
#         Whenever we are using os._exit(0) function then Python Virtual Machine itself will be
#         shutdown.In this particular case finally won't be executed.

import os
try:
    print('try')
    os._exit(0)  #after executing this line kernel will get shut down. You have to restart the kernel again.
except:
    print('except')
finally:
    print('finally')
    
'''Note: os._exit(0)
where 0 represents status code and it indicates normal termination
There are multiple status codes are possible.'''



try:
    #print('try')
    print(10/0)
except ZeroDivisionerror:
    print('Zero Division Error')
finally:
    print('finally')
    
    

